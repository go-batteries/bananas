// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: hellow/api.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HellowService_PostHellow_FullMethodName   = "/protos.web.HellowService/PostHellow"
	HellowService_GetHellow_FullMethodName    = "/protos.web.HellowService/GetHellow"
	HellowService_DeleteHellow_FullMethodName = "/protos.web.HellowService/DeleteHellow"
)

// HellowServiceClient is the client API for HellowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HellowServiceClient interface {
	// PostHellow handles the POST /hellow endpoint
	PostHellow(ctx context.Context, in *HellowRequest, opts ...grpc.CallOption) (*HellowResponse, error)
	// GetHellow handles the GET /hellow?name=Name endpoint
	GetHellow(ctx context.Context, in *HellowGetRequest, opts ...grpc.CallOption) (*HellowResponse, error)
	// DeleteHellow handles the DELETE /hellow?name=Name endpoint
	DeleteHellow(ctx context.Context, in *HellowGetRequest, opts ...grpc.CallOption) (*HellowResponse, error)
}

type hellowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHellowServiceClient(cc grpc.ClientConnInterface) HellowServiceClient {
	return &hellowServiceClient{cc}
}

func (c *hellowServiceClient) PostHellow(ctx context.Context, in *HellowRequest, opts ...grpc.CallOption) (*HellowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HellowResponse)
	err := c.cc.Invoke(ctx, HellowService_PostHellow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellowServiceClient) GetHellow(ctx context.Context, in *HellowGetRequest, opts ...grpc.CallOption) (*HellowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HellowResponse)
	err := c.cc.Invoke(ctx, HellowService_GetHellow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellowServiceClient) DeleteHellow(ctx context.Context, in *HellowGetRequest, opts ...grpc.CallOption) (*HellowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HellowResponse)
	err := c.cc.Invoke(ctx, HellowService_DeleteHellow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HellowServiceServer is the server API for HellowService service.
// All implementations must embed UnimplementedHellowServiceServer
// for forward compatibility.
type HellowServiceServer interface {
	// PostHellow handles the POST /hellow endpoint
	PostHellow(context.Context, *HellowRequest) (*HellowResponse, error)
	// GetHellow handles the GET /hellow?name=Name endpoint
	GetHellow(context.Context, *HellowGetRequest) (*HellowResponse, error)
	// DeleteHellow handles the DELETE /hellow?name=Name endpoint
	DeleteHellow(context.Context, *HellowGetRequest) (*HellowResponse, error)
	mustEmbedUnimplementedHellowServiceServer()
}

// UnimplementedHellowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHellowServiceServer struct{}

func (UnimplementedHellowServiceServer) PostHellow(context.Context, *HellowRequest) (*HellowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostHellow not implemented")
}
func (UnimplementedHellowServiceServer) GetHellow(context.Context, *HellowGetRequest) (*HellowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHellow not implemented")
}
func (UnimplementedHellowServiceServer) DeleteHellow(context.Context, *HellowGetRequest) (*HellowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHellow not implemented")
}
func (UnimplementedHellowServiceServer) mustEmbedUnimplementedHellowServiceServer() {}
func (UnimplementedHellowServiceServer) testEmbeddedByValue()                       {}

// UnsafeHellowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HellowServiceServer will
// result in compilation errors.
type UnsafeHellowServiceServer interface {
	mustEmbedUnimplementedHellowServiceServer()
}

func RegisterHellowServiceServer(s grpc.ServiceRegistrar, srv HellowServiceServer) {
	// If the following call pancis, it indicates UnimplementedHellowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HellowService_ServiceDesc, srv)
}

func _HellowService_PostHellow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HellowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellowServiceServer).PostHellow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HellowService_PostHellow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellowServiceServer).PostHellow(ctx, req.(*HellowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HellowService_GetHellow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HellowGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellowServiceServer).GetHellow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HellowService_GetHellow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellowServiceServer).GetHellow(ctx, req.(*HellowGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HellowService_DeleteHellow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HellowGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellowServiceServer).DeleteHellow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HellowService_DeleteHellow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellowServiceServer).DeleteHellow(ctx, req.(*HellowGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HellowService_ServiceDesc is the grpc.ServiceDesc for HellowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HellowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.web.HellowService",
	HandlerType: (*HellowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostHellow",
			Handler:    _HellowService_PostHellow_Handler,
		},
		{
			MethodName: "GetHellow",
			Handler:    _HellowService_GetHellow_Handler,
		},
		{
			MethodName: "DeleteHellow",
			Handler:    _HellowService_DeleteHellow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellow/api.proto",
}
